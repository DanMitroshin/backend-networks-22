# Generated by Django 3.0.6 on 2022-11-23 20:33

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccessGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('classroom', 'Classroom'), ('access', 'Content access group')], default='access', max_length=32)),
                ('invite_code', models.CharField(blank=True, max_length=32, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Associate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('associate', models.CharField(max_length=250, verbose_name='associate')),
                ('is_algorithm', models.IntegerField(default=1)),
                ('date', models.CharField(max_length=50, verbose_name='date')),
                ('event', models.TextField(blank=True, verbose_name='event')),
                ('number', models.CharField(blank=True, max_length=100, verbose_name='number')),
            ],
        ),
        migrations.CreateModel(
            name='ContentArchitecture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Architecture name')),
                ('index', models.IntegerField(unique=True, verbose_name='Unique index')),
                ('date', models.CharField(blank=True, max_length=70, verbose_name='Date')),
                ('founder', models.CharField(blank=True, max_length=120, verbose_name='Founder')),
                ('architect', models.CharField(blank=True, max_length=120, verbose_name='Architect')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('style', models.CharField(blank=True, max_length=100, verbose_name='Style')),
                ('image', models.TextField(blank=True, verbose_name='Link to the image')),
                ('image_100', models.URLField(blank=True, max_length=300, null=True, verbose_name='Image with width 100px')),
                ('information', models.TextField(blank=True, verbose_name='Information')),
                ('tags', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='ContentDialog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField(help_text='Это уникальный индекс диалога (ставится по возрастанию от предыдущих, иногда с каким-то зазором в 2-3 свободных индекса).', unique=True, verbose_name='Dialog index')),
                ('person_name', models.CharField(max_length=30)),
                ('app_version', models.IntegerField(blank=True, help_text='Используется, если категория диалога рассчитана на информацию об обновлении.', null=True, verbose_name='App dialog version about update')),
                ('image', models.TextField(blank=True, help_text='Очень желательно, чтобы картинка была скругленной и сжатой, 100 на 100 вполне ок.', verbose_name='Link to the image of person')),
                ('content', models.TextField(help_text='Это JSON-представление диалога. Часто совсем нечитабельное из-за перевода в другую кодировку.', verbose_name='Dialog content')),
                ('author', models.CharField(blank=True, help_text='Кто придумал диалог. Обычно не указывается, чтобы не отображалось у пользователя.', max_length=30, verbose_name='Author of the dialog')),
                ('save_status', models.IntegerField(help_text='1 - сохранять ответы для статистики, 0 - не сохранять. Обычно 1, если предполагается выбор.', verbose_name='Status for saving user answers')),
                ('category', models.IntegerField(blank=True, choices=[(1, 'About new app update'), (2, 'Redirect to store to update app'), (3, 'First enter'), (4, 'Motivation dialog'), (5, 'Sale content'), (6, 'Information dialog'), (7, 'Daily learning'), (8, 'Daily statistics'), (9, 'Weekly statistics'), (10, 'Monthly statistics'), (11, 'Advertisement for projects outside the app'), (12, 'Fun and entertainment'), (13, 'Rating results'), (14, 'Rating participate'), (15, 'Return to app after break'), (16, 'Gifts and prizes'), (17, 'Yearly dialog'), (18, 'Birthday dialog'), (19, 'Test dialog')], help_text='Для тестирования используй категорию Test. Ее потом можно заменить.', null=True, verbose_name='Dialog category')),
                ('status', models.IntegerField(choices=[(0, 'Inactive dialog'), (1, 'Active dialog')], default=1, help_text='Неактивные диалоги не будут отображаться и учитываться в очереди на отображение для пользователей', verbose_name='Dialog status')),
            ],
        ),
        migrations.CreateModel(
            name='ContentDialogAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dialog_index', models.IntegerField(verbose_name='Dialog index')),
                ('action_index', models.IntegerField(verbose_name='User action index')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
            ],
        ),
        migrations.CreateModel(
            name='ContentEntity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wikidata_id', models.IntegerField(blank=True, help_text='Number in identifier (digits in (Q...))', null=True, unique=True, verbose_name='Wikidata identifier')),
                ('table', models.SmallIntegerField(blank=True, choices=[(1, 'Persons'), (2, 'Terms'), (3, 'Dates rus'), (4, 'Maps'), (5, 'Architecture'), (6, 'Literature'), (7, 'Pictures'), (8, 'Sculpture'), (9, 'History texts'), (10, 'Theory'), (11, 'Questions'), (12, 'Videos'), (13, 'Dates world')], null=True, verbose_name='Content table of entity')),
                ('index', models.IntegerField(blank=True, null=True, verbose_name='Content table entity index')),
                ('name', models.CharField(help_text='Name from content table (if exists)', max_length=250, verbose_name='Entity name')),
                ('alternative_names', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, help_text='Description (without name) from preview function for entity table', null=True, verbose_name='Very short description about entity')),
                ('text', models.TextField(blank=True, help_text='Text (with name) from preview function for entity table', null=True, verbose_name='Very short text about entity')),
                ('image', models.TextField(blank=True, null=True)),
                ('rank', models.IntegerField(default=1, help_text='Rank for rank algorithms to sort entities')),
            ],
        ),
        migrations.CreateModel(
            name='ContentEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='Event name')),
                ('index', models.IntegerField(unique=True, verbose_name='Unique index')),
                ('date', models.CharField(max_length=80, verbose_name='Event date')),
                ('information', models.TextField(blank=True, verbose_name='Additional information about event')),
                ('tags', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='ContentHistoryText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Text name')),
                ('index', models.IntegerField(unique=True, verbose_name='Unique index')),
                ('date', models.CharField(blank=True, max_length=70, verbose_name='Date')),
                ('is_full', models.BooleanField(verbose_name='Is full text')),
                ('text', models.TextField(verbose_name='History text')),
                ('information', models.TextField(blank=True, verbose_name='Information')),
                ('recognize_hint', models.TextField(blank=True, verbose_name='Recognize hint')),
                ('tags', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='ContentIndexRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_index', models.IntegerField(verbose_name='First index')),
                ('first_code', models.CharField(max_length=2, verbose_name='First code of table')),
                ('second_index', models.IntegerField(verbose_name='Second index')),
                ('second_code', models.CharField(max_length=2, verbose_name='Second code of table')),
            ],
        ),
        migrations.CreateModel(
            name='ContentLiterature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Literature name')),
                ('index', models.IntegerField(unique=True, verbose_name='Unique index')),
                ('date', models.CharField(blank=True, max_length=70, verbose_name='Date')),
                ('author', models.CharField(blank=True, max_length=120, verbose_name='Author')),
                ('image', models.TextField(blank=True, verbose_name='Link to the image of literature')),
                ('image_100', models.URLField(blank=True, max_length=300, null=True, verbose_name='Image with width 100px')),
                ('information', models.TextField(blank=True, verbose_name='Information')),
                ('tags', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='ContentMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Map name')),
                ('index', models.IntegerField(unique=True, verbose_name='Unique index')),
                ('date', models.CharField(blank=True, max_length=70, verbose_name='Date')),
                ('image', models.TextField(blank=True, verbose_name='Link to the image of map')),
                ('image_100', models.URLField(blank=True, max_length=300, null=True, verbose_name='Image with width 100px')),
                ('task_image', models.TextField(blank=True, verbose_name='Link to the image of task with map')),
                ('information', models.TextField(blank=True, verbose_name='Information')),
                ('tags', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='ContentPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Person name')),
                ('index', models.IntegerField(unique=True, verbose_name='Unique index')),
                ('another_names', models.TextField(blank=True, verbose_name='Another names of person')),
                ('summary', models.TextField(blank=True, verbose_name='Person summary')),
                ('dates_of_life', models.CharField(blank=True, max_length=100, verbose_name='Dates of life')),
                ('board_time', models.CharField(blank=True, max_length=100, verbose_name='Time of the board')),
                ('image', models.TextField(blank=True, verbose_name='Link to the image')),
                ('image_100', models.URLField(blank=True, max_length=300, null=True, verbose_name='Image with width 100px')),
                ('information', models.TextField(blank=True, verbose_name='Information about person')),
                ('tags', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='ContentPicture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Architecture name')),
                ('index', models.IntegerField(unique=True, verbose_name='Unique index')),
                ('date', models.CharField(blank=True, max_length=70, verbose_name='Date')),
                ('author', models.CharField(blank=True, max_length=120, verbose_name='Author')),
                ('image', models.TextField(blank=True, verbose_name='Link to the image of picture')),
                ('image_100', models.URLField(blank=True, max_length=300, null=True, verbose_name='Image with width 100px')),
                ('information', models.TextField(blank=True, verbose_name='Information')),
                ('tags', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='ContentSculpture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Sculpture name')),
                ('index', models.IntegerField(unique=True, verbose_name='Unique index')),
                ('date', models.CharField(blank=True, max_length=70, verbose_name='Date')),
                ('author', models.CharField(blank=True, max_length=120, verbose_name='Author')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('image', models.TextField(blank=True, verbose_name='Link to the image of sculpture')),
                ('image_100', models.URLField(blank=True, max_length=300, null=True, verbose_name='Image with width 100px')),
                ('information', models.TextField(blank=True, verbose_name='Information')),
                ('tags', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='ContentTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Term name')),
                ('index', models.IntegerField(unique=True, verbose_name='Unique index')),
                ('definition', models.TextField(verbose_name='Definition of the term')),
                ('information', models.TextField(blank=True, verbose_name='Additional information about term')),
                ('tags', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='ContentTheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='Theme name')),
                ('index', models.IntegerField(blank=True, null=True, unique=True, verbose_name='Unique index')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='ContentVideo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=120, verbose_name='Name')),
                ('index', models.IntegerField(unique=True, verbose_name='Unique index')),
                ('image', models.TextField(blank=True, verbose_name='Link to the image of video')),
                ('time_code', models.IntegerField(default=0, verbose_name='Time code')),
            ],
        ),
        migrations.CreateModel(
            name='MediaBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=250, verbose_name='media block name')),
                ('text', models.TextField(verbose_name='media block text')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='Lesson name')),
                ('index', models.IntegerField(blank=True, null=True, unique=True, verbose_name='Unique index')),
                ('active', models.IntegerField(default=1)),
                ('lesson_type', models.CharField(choices=[('p0', 'Unlisted supporting products'), ('p1', 'Informational lesson'), ('p2', 'Handcrafted trainer lesson'), ('p3', 'Autogenerated trainer lesson')], default='p2', max_length=5, verbose_name='Lesson type')),
                ('theme', models.CharField(blank=True, db_index=True, max_length=250)),
                ('section', models.CharField(blank=True, db_index=True, max_length=10)),
                ('tag', models.TextField(blank=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TrainerBlockPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person', models.CharField(max_length=10)),
                ('description', models.TextField(default='')),
                ('name', models.CharField(default='', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='TrainerBlockTag',
            fields=[
                ('tag', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='VideoInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Video name')),
                ('key', models.CharField(max_length=100, verbose_name='Youtube video key')),
                ('image', models.TextField(verbose_name='Link to the image of video')),
                ('duration', models.IntegerField(default=0, verbose_name='Video duration')),
            ],
        ),
        migrations.CreateModel(
            name='TrainerBlockPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.CharField(max_length=10)),
                ('description', models.TextField(default='')),
                ('name', models.CharField(default='', max_length=50)),
                ('section', models.CharField(blank=True, db_index=True, default='', max_length=10)),
                ('persons', models.ManyToManyField(blank=True, to='Content.TrainerBlockPerson')),
            ],
        ),
        migrations.CreateModel(
            name='TrainerBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(verbose_name='Text of a question')),
                ('trivia', models.TextField(blank=True, verbose_name='Trivia for a question')),
                ('img', models.TextField(blank=True, verbose_name='Image for a question')),
                ('index', models.IntegerField(blank=True, null=True, unique=True, verbose_name='Unique index')),
                ('answers', models.TextField(blank=True, verbose_name='List of answers')),
                ('valid_answers', models.TextField(blank=True, verbose_name='List of valid answers')),
                ('question_type', models.CharField(choices=[('one', 'One possible answer'), ('many', 'Many possible answers'), ('self', 'Answer should be typed in'), ('chron', 'Chronological sequence of variants'), ('relat', 'Relations between variants'), ('arg', 'Reasons and arguments')], default='one', max_length=5, verbose_name='Type of a question')),
                ('active', models.IntegerField(default=1)),
                ('theme', models.CharField(blank=True, db_index=True, max_length=250)),
                ('section', models.CharField(blank=True, db_index=True, max_length=10)),
                ('periods', models.ManyToManyField(blank=True, to='Content.TrainerBlockPeriod', verbose_name='periods')),
                ('persons', models.ManyToManyField(blank=True, to='Content.TrainerBlockPerson', verbose_name='persons')),
                ('tags', models.ManyToManyField(blank=True, related_name='trainer_blocks', to='Content.TrainerBlockTag', verbose_name='tags')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialQuestionAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.TextField(verbose_name='User answer')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Content.TrainerBlock', verbose_name='Question')),
            ],
        ),
    ]
