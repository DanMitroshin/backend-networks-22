import json

from Content.models import ContentDialog, ContentDialogAnswer
from django.db.models import Max
from django.utils import timezone
from Content.constants import DIALOG_CATEGORY
from Statistics.models import InitLog, TrainerBlockProgress, ProductLog, ActivityLog, UserMetric
from datetime import timedelta
from collections import Counter
import string
import random

from Users.utils.permissions import check_has_content_access
from Users.constants import DEVICES

FROM_USER = 'fromUser'
MESSAGE = 'message'


BIRTHDAY_DIALOG = [
    {
        'fromUser': False,
        'message': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —Ç–æ–≤–∞—Ä–∏—â!'
    },
    {
        'fromUser': False,
        'message': "–£–∂ –Ω–µ –∑–Ω–∞—é, –ø—Ä–∞–∑–¥–Ω—É–µ—à—å –ª–∏ —Ç—ã –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è, –Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ —è —Ç–µ–±—è –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!"
    },
    {
        'fromUser': True,
        'message': "–°–ø–∞—Å–∏–±–æ!"
    },
    {
        'fromUser': False,
        'message': "–ñ–µ–ª–∞—é –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π üíØ"
    },
    {
        'fromUser': False,
        'message': "–ú—ã –≤—Å–µ–π –∫–æ–º–∞–Ω–¥–æ–π –≤–µ—Ä–∏–º, —á—Ç–æ —Ç—ã –Ω–µ —Ç–æ–ª—å–∫–æ —Å–º–æ–∂–µ—à—å –≤—Å—é –Ω—É–∂–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—ã—É—á–∏—Ç—å, "
                   "–Ω–æ –∏ —Å–≤–æ—é –∏–¥–µ–æ–ª–æ–≥–∏—é –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å –Ω–∞ –≤–µ—Å—å –º–∏—Ä, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è üòé"
    },
    {
        'fromUser': False,
        'message': "–í –æ–±—â–µ–º, –±–æ–ª—å—à–∏—Ö —Ç–µ–±–µ –ø–æ–±–µ–¥ –∏ —É—Å–ø–µ—Ö–æ–≤ üöÄ"
    },
    {
        'fromUser': True,
        'message': "–ë–ª–∞–≥–æ–¥–∞—Ä—é!"
    },
]


def add_dialog(person_name="", index=None, image='', content=None, author='', save_status=0, category=6):
    if index is None:
        if len(ContentDialog.objects.all()):
            index = ContentDialog.objects.all().aggregate(Max('index'))['index__max'] + 1
        else:
            index = 1

    # content = ADVERTISEMENT_DIALOG_3

    str_content = json.dumps(content)
    print(str_content)
    return
    # print("CATEG", category, person_name, image)

    try:
        ContentDialog.objects.create(
            index=index,
            person_name=person_name,
            image=image,
            content=str_content,
            author=author,
            save_status=int(save_status),
            category=int(category),
        )
    except Exception as e:
        print("ERR", e)


# def get_day_word

def create_yearly_dialog_for_user(user):
    dialog = [
        {
            FROM_USER: False,
            MESSAGE: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ—Ä–æ–≥–∏–µ —Ä–æ—Å—Å–∏—è–Ω–µ!"
        },
        {
            FROM_USER: False,
            MESSAGE: "–ö—Ö–º, —Å–æ–≥–ª–∞—Å–µ–Ω, —Å–ª–∏—à–∫–æ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ. –í—Å–µ-—Ç–∞–∫–∏ —è –Ω–µ –≤ —Ç–µ–ª–µ–≤—É–∑–µ—Ä–µ, –∏–ª–∏ –∫–∞–∫ —Ç–∞–º –æ–Ω —É –≤–∞—Å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è. "
                     "–ü—Ä–∏–≤–µ—Ç, –≤ –æ–±—â–µ–º üòâ"
        },
        {
            FROM_USER: True,
            MESSAGE: "–ü—Ä–∏–≤–µ—Ç!"
        },
        {
            FROM_USER: False,
            MESSAGE: "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –º–µ–Ω—è –Ω–µ–º–Ω–æ–∂–∫–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ —Ç–æ–º, "
                     "–∫–∞–∫–æ–π —É –Ω–∞—Å —Å —Ç–æ–±–æ–π –ø–æ–ª—É—á–∏–ª—Å—è —ç—Ç–æ—Ç –≥–æ–¥!"
        },
        {
            FROM_USER: True,
            MESSAGE: "–ü–æ–≥–Ω–∞–ª–∏!"
        },
        {
            FROM_USER: False,
            MESSAGE: "–ü–æ–≥–Ω–∞–ª–∏!"
        },
    ]

    days_with_us = min(365, (timezone.now() - user.date_joined).days)
    if days_with_us > 50:
        dialog += [
            {
                FROM_USER: False,
                MESSAGE: f"–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ç—ã —É–∂–µ —Å –Ω–∞–º–∏? <b>–¶–µ–ª—ã—Ö {days_with_us}!</b>"
            },
            {
                FROM_USER: False,
                MESSAGE: f"–û–ì–û üòé\n–Ø –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏! "
                         f"–ù–∞–¥–µ—é—Å—å, –≤ –Ω–æ–≤–æ–º –≥–æ–¥—É —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏—à—å —ç—Ç—É —Ç—Ä–∞–¥–∏—Ü–∏—é üòâ"
            },
            {
                FROM_USER: True,
                MESSAGE: f"–û –¥–∞"
            },
        ]
    else:
        dialog += [
            {
                FROM_USER: False,
                MESSAGE: f"–ó–Ω–∞–µ—à—å, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ç—ã —É–∂–µ —Å –Ω–∞–º–∏? <b>–¶–µ–ª—ã—Ö {days_with_us}!</b>"
            },
            {
                FROM_USER: False,
                MESSAGE: f"–î—É–º–∞—é, –º—ã –ª–µ–≥–∫–æ –ø—Ä–æ–±—å–µ–º —ç—Ç—É –ø–ª–∞–Ω–∫—É –≤ –Ω–æ–≤–æ–º –≥–æ–¥—É üòâ"
            },
            {
                FROM_USER: True,
                MESSAGE: f"–ö–æ–Ω–µ—á–Ω–æ!"
            },
        ]

    enters_amount = InitLog.objects.filter(user=user).count()
    dialog += [
        {
            FROM_USER: False,
            MESSAGE: f"–£ —Ç–µ–±—è –±–æ–ª–µ–µ {enters_amount} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥!\n"
                     f"üî• –ò –≤–æ—Ç —á—Ç–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è:"
        }
    ]

    achievements_amount = 0

    answers_queryset = TrainerBlockProgress.objects.filter(user=user)
    total_answers = 0
    right_answers = 0

    for answer in answers_queryset:
        total_answers += answer.attempts
        right_answers += answer.successful_attempts

    if total_answers >= 10 and right_answers > 5:
        achievements_amount += 1
        dialog += [
            {
                FROM_USER: False,
                MESSAGE: f'üöÄ –¢–æ–±–æ–π –ø—Ä–æ–π–¥–µ–Ω –ø—É—Ç—å –∏–∑ {total_answers} –æ—Ç–≤–µ—Ç–æ–≤, —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö {right_answers} –≤–µ—Ä–Ω—ã—Ö!'
            }
        ]
        if total_answers == right_answers:
            dialog += [{
                FROM_USER: False,
                MESSAGE: "–í—Å–µ –≤–µ—Ä–Ω—ã–µ, –≤–æ—Ç —ç—Ç–æ —Ç—ã –º–æ–ª–æ–¥–µ—Ü!"
            }]
        elif total_answers * 0.9 < right_answers:
            dialog += [{
                FROM_USER: False,
                MESSAGE: "–ü–æ—á—Ç–∏ –≤—Å–µ –≤–µ—Ä–Ω—ã–µ, –º–æ–ª–æ–¥–µ—Ü!"
            }]
    elif total_answers > 0 and right_answers > 0:
        achievements_amount += 1
        dialog += [{
            FROM_USER: False,
            MESSAGE: f'üöÄ –£ —Ç–µ–±—è {total_answers} –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏ –µ—â–µ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!'
        }]
    else:
        dialog += [{
            FROM_USER: False,
            MESSAGE: f'üöÄ –£ —Ç–µ–±—è –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—à–∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, '
                     f'—Ç–∞–∫ —á—Ç–æ –≤ –Ω–æ–≤–æ–º –≥–æ–¥—É –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!'
        }]

    product_log_queryset = ProductLog.objects.filter(user=user)
    tests_amount = 0
    theory_amount = 0
    tests_time = timedelta(seconds=0)
    theory_time = timedelta(seconds=0)
    themes = Counter()
    for product in product_log_queryset:
        if product.product.lesson_type == 'p1':
            theory_time += product.time_to_complete
            theory_amount += 1
        if product.product.lesson_type in ['p2', 'p3']:
            tests_time += product.time_to_complete
            tests_amount += 1

        try:
            themes[product.product.content_theme.name] += 1
        except:
            pass

    tests_time = max(2, int(tests_time.total_seconds()) // 60)
    theory_time = max(2, int(theory_time.total_seconds()) // 60)
    # print("TIME", tests_time.total_seconds(), theory_time.total_seconds(), theory_amount)

    best_theme = ''
    best_amount_theme = 0
    for key in themes.keys():
        if themes[key] > best_amount_theme:
            best_amount_theme = themes[key]
            best_theme = key

    def minutes_word_end(amount):
        if amount % 10 in [0, 5, 6, 7, 8, 9] or (5 <= amount % 100 <= 20):
            return "–º–∏–Ω—É—Ç"
        # if amount % 10 in [2, 3, 4]:
        return "–º–∏–Ω—É—Ç—ã"

    if tests_time >= 5:
        dialog += [{
            FROM_USER: False,
            MESSAGE: f'üèÜ –£ —Ç–µ–±—è –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ <b>{tests_amount} —Ç–µ—Å—Ç–æ–≤</b>. '
                     f'–ê —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∑–∞–Ω—è–ª–∏ —É —Ç–µ–±—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? –ê–∂ <b>{tests_time}</b>!'
        }]
    else:
        if tests_amount >= 2:
            dialog += [{
                FROM_USER: False,
                MESSAGE: f'üèÜ –£ —Ç–µ–±—è –ø—Ä–æ–π–¥–µ–Ω–æ –±–æ–ª–µ–µ <b>{tests_amount} —Ç–µ—Å—Ç–æ–≤</b>. '
                         f'–ê –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞–Ω—è–ª–∏ –ø–æ–∫–∞ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç.'
            }]
        else:
            dialog += [{
                FROM_USER: False,
                MESSAGE: f'üèÜ –£ —Ç–µ–±—è –ø—Ä–æ–π–¥–µ–Ω–æ –Ω–µ —Ç–∞–∫ –º–Ω–æ–≥–æ –Ω–µ—Å—Ç–æ–≤. '
                         f'–ê –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞–Ω—è–ª–∏ –ø–æ–∫–∞ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç.'
            }]

    if theory_time >= 5:
        dialog += [{
            FROM_USER: False,
            MESSAGE: f'–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —É—Ä–æ–∫–æ–≤ —Ç–µ–æ—Ä–∏–∏: {theory_amount}. '
                     f'–ò —ç—Ç–æ –∑–∞–Ω—è–ª–æ —É —Ç–µ–±—è <b>{theory_time} {minutes_word_end(theory_time)}</b>!'
        }]
    else:
        if theory_amount >= 2:
            dialog += [{
                FROM_USER: False,
                MESSAGE: f'–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —É—Ä–æ–∫–æ–≤ —Ç–µ–æ—Ä–∏–∏: {theory_amount}. '
                         f'–ê —á—Ç–µ–Ω–∏–µ –∑–∞–Ω—è–ª–æ –ø–æ–∫–∞ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç.'
            }]
        # else:
        #     dialog += [{
        #         FROM_USER: False,
        #         MESSAGE: f'üèÜ –£ —Ç–µ–±—è –ø—Ä–æ–π–¥–µ–Ω–æ –Ω–µ —Ç–∞–∫ –º–Ω–æ–≥–æ –Ω–µ—Å—Ç–æ–≤. '
        #                  f'–ê –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞–Ω—è–ª–∏ –ø–æ–∫–∞ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç.'
        #     }]

    if best_theme:
        dialog += [{
            FROM_USER: False,
            MESSAGE: f'üçµ –ò –¥–∞, —Ç–≤–æ—è –ª—é–±–∏–º–∞—è —Ç–µ–º–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É - —ç—Ç–æ <b>"{best_theme}"</b>'
        }]

    dialog += [{
        FROM_USER: True,
        MESSAGE: f'–û—Ç–ª–∏—á–Ω–æ!'
    }]

    activities_wiki = len(ActivityLog.objects.filter(user=user, activity__startswith='C_'))

    if activities_wiki >= 7:
        dialog += [{
            FROM_USER: False,
            MESSAGE: f'–ê –µ—â–µ, –¥—É–º–∞—é, —Ç–µ–±–µ —á–µ–º-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞—à–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–µ—Ç—å –∑–Ω–∞–Ω–∏–π, '
                     f'–≤–µ–¥—å —É —Ç–µ–±—è {activities_wiki} –µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π!'
        }]
    else:
        dialog += [{
            FROM_USER: False,
            MESSAGE: f'–ê –µ—â–µ –≤ –±—É–¥—É—â–µ–º –≥–æ–¥—É —É —Ç–µ–±—è –µ—Å—Ç—å —à–∞–Ω—Å –±–æ–ª—å—à–µ –∏–∑—É—á–∞—Ç—å –Ω–∞—à—É —Å–µ—Ç—å –∑–Ω–∞–Ω–∏–π, '
                     f'–ø–æ–∫–∞ —á—Ç–æ —É —Ç–µ–±—è –º–µ–Ω–µ–µ 7 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è:)'
        }]

    try:
        week_bp_queryset = UserMetric.objects.filter(user=user, metric='week_bp')
        if week_bp_queryset.exists():
            week_bp = int(week_bp_queryset.first().value)
            dialog += [{
                FROM_USER: False,
                MESSAGE: f'üèÜ –ê—Ö –¥–∞, –∏ —Ç–≤–æ–µ –ª—É—á—à–µ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ - {week_bp}! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –¥–∞–ª—å—à–µ!'
            }]
    except:
        pass

    dialog += [{
        FROM_USER: True,
        MESSAGE: f'–¢–æ—á–Ω–æ!'
    }]

    has_access = check_has_content_access(user)
    if has_access:
        dialog += [
            {
                FROM_USER: False,
                MESSAGE: f'–ò —Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏ üòé\n–ú—ã –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã —Ç–µ–±–µ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ –±—É–¥–µ–º —Å—Ç–∞—Ä–∞—Ç—å—Å—è '
                         f'–¥–µ–ª–∞—Ç—å –¥–ª—è —Ç–µ–±—è –≤—Å—ë –ª—É—á—à–µ–µ –∏ –¥–∞–ª—å—à–µ! –° –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏ —Ç–µ–±—è!'
            },
            {
                FROM_USER: True,
                MESSAGE: "–°–ø–∞—Å–∏–±–æ!"
            }
        ]
    else:
        dialog += [
            {
                FROM_USER: False,
                MESSAGE: f'–ò —Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏ üòé\n–ú—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã —Ç–µ–±–µ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ '
                         f'–∫ –Ω–æ–≤–æ–º—É –≥–æ–¥—É —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–¥–∞—Ä–æ–∫!'
            },
            {
                FROM_USER: False,
                MESSAGE: f'–î–∞–µ–º <b>–ø—Ä–æ–º–æ–∫–æ–¥ YEAR_2022</b> –Ω–∞ —Å–∫–∏–¥–∫—É –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –¥–æ—Å—Ç—É–ø–∞! –ú–æ–∂–µ—à—å –∑–∞—Å–∫—Ä–∏–Ω–∏—Ç—å:)'
            },
            {
                FROM_USER: False,
                MESSAGE: f'‚ùó –û–Ω –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π. '
                         f'–¢–∞–∫ —á—Ç–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø, —Å–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è üòå'
            },
            {
                FROM_USER: False,
                MESSAGE: f'–° –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏ —Ç–µ–±—è! –ò –±–æ–ª—å—à–∏—Ö —É—Å–ø–µ—Ö–æ–≤ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏!'
            },
            {
                FROM_USER: True,
                MESSAGE: "–°–ø–∞—Å–∏–±–æ!"
            }
        ]

    return dialog


def get_first_promo_code(amount=4):
    letters = string.ascii_lowercase + string.ascii_uppercase + '0123456789'
    rand_string = ''.join(random.choice(letters) for _ in range(amount))
    return f'HIST_{rand_string}'


def get_first_promo_code_to_user(user):
    return ""


def get_dialog(index, user=None, show_author=False):
    dialog = ContentDialog.objects.filter(index=index).first()
    dialog_dict = {
        'dialog': json.loads(dialog.content), # if user.username not in ['vk__103159559', 'vk__133671258'] else FIRST_ENTER_CONTENT,
        'saveChoices': bool(dialog.save_status),
        'index': dialog.index,
        'name': dialog.person_name,
    }
    if dialog.image:
        dialog_dict['image'] = dialog.image
    if dialog.author and show_author:
        dialog_dict['author'] = dialog.author

    if dialog.category == DIALOG_CATEGORY.YEARLY_DIALOG:
        yearly_dialog = create_yearly_dialog_for_user(user)
        dialog_dict['dialog'] = yearly_dialog

    elif dialog.category == DIALOG_CATEGORY.FIRST_ENTER:

        try:
            if user.device != DEVICES.APPLE and random.random() < 0.99:
                code = get_first_promo_code_to_user(user)
            else:
                del dialog_dict['dialog'][-3:-1]
        except:
            code = 'SECRET_CODE_6548'
        # print("GET CODE:", code)

        # for message_data in dialog_dict['dialog']:
        #     message_data[MESSAGE] = message_data[MESSAGE].replace('{promo_code}', code)

    elif dialog.category == DIALOG_CATEGORY.BIRTHDAY_DIALOG:
        if (not check_has_content_access(user)) and (user.device != DEVICES.APPLE):
            code = get_first_promo_code_to_user(user)
            dialog_dict['dialog'] += [
                {
                    FROM_USER: False,
                    MESSAGE: "–ö—Å—Ç–∞—Ç–∏. –Ø, –∫–æ–Ω–µ—á–Ω–æ, –Ω–µ –°–∞–Ω—Ç–∞, –Ω–æ –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–¥–∞—Ä–æ–∫ –≤ –≤–∏–¥–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ "
                             "—É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è –≤ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ!"
                },
                {
                    FROM_USER: True,
                    MESSAGE: "–û–≥–æ–Ω—å!"
                }
            ]

    return dialog_dict


def save_user_dialog_choices(user, dialog_index, actions):
    for action in actions:
        ContentDialogAnswer.objects.create(
            user=user,
            dialog_index=dialog_index,
            action_index=action,
        )


def get_dialog_impressions_amount(index):
    return ContentDialogAnswer.objects.filter(dialog_index=index).count()


def get_action_with_dialog_info(index, impressions_amount, action_number):
    actions_amount = ContentDialogAnswer.objects.filter(dialog_index=index, action_index=action_number).count()
    if impressions_amount > 0:
        return f"{actions_amount} ({round(actions_amount / impressions_amount * 100, 1)}%)"
    return f"0 (0%)"


def get_good_actions_with_dialog_info(index, impressions_amount, action_number=2):
    return get_action_with_dialog_info(index, impressions_amount, action_number)


def get_bad_actions_with_dialog_info(index, impressions_amount, action_number=1):
    return get_action_with_dialog_info(index, impressions_amount, action_number)


def get_statistics_answers_dialog(dialog_index):
    all_answers = ContentDialogAnswer.objects.filter(dialog_index=dialog_index)
    stat_dict = Counter()
    counter = 0
    for answer in all_answers:
        counter += 1
        stat_dict[answer.action_index] += 1
    good_answer = 2
    close_answer = 1
    text = f"–í—Å–µ–≥–æ –ø–æ–∫–∞–∑–æ–≤: {counter}\n"
    if counter > 0:
        text += f"–ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ: {stat_dict[good_answer]} ({round(stat_dict[good_answer] / counter * 100, 1)}%)\n"
        text += f"–û—Ç–∫–∞–∑–æ–≤: {stat_dict[close_answer]} ({round(stat_dict[close_answer] / counter * 100, 1)}%)"
    return text
