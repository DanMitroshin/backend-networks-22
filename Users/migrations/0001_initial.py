# Generated by Django 3.0.6 on 2022-11-23 20:33

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Content', '0001_initial'),
        ('Statistics', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessGroupUserRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('role', models.CharField(choices=[('access_trial', 'On trial'), ('access_purchased', 'Purchased'), ('access_gifted', 'Received as a gift'), ('access_permanent', 'Permanent access'), ('classroom_owner', 'Classroom owner'), ('classroom_assistent', 'Assistent'), ('classroom_student', 'Student')], default='access_permanent', max_length=32)),
                ('access_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Content.AccessGroup')),
            ],
        ),
        migrations.CreateModel(
            name='UserAchievementRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),
                ('achieve', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Statistics.Achievement')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('vk_id', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('vk_access_token', models.CharField(blank=True, max_length=400)),
                ('identifier', models.UUIDField(blank=True, null=True, unique=True)),
                ('account_token', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('nickname', models.CharField(blank=True, help_text="Nickname must be between 5 and 100 letters long can't match 'id[0-9]+'", max_length=100, null=True, unique=True)),
                ('registration_platform', models.IntegerField(choices=[(1, 'Email'), (2, 'VK'), (3, 'Apple ID')], default=1)),
                ('device', models.IntegerField(choices=[(1, 'Android'), (2, 'Apple'), (3, 'Web')], default=1)),
                ('last_entry', models.DateTimeField(blank=True, null=True, verbose_name='last entry')),
                ('version_app', models.IntegerField(default=-1, verbose_name="User's app version")),
                ('is_teacher', models.BooleanField(default=False, help_text='Designates whether the user is a teacher.', verbose_name='Teacher status')),
                ('image', models.URLField(blank=True, max_length=250, null=True)),
                ('image_50', models.URLField(blank=True, max_length=250, null=True)),
                ('sex', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Unknown'), (1, 'Woman'), (2, 'Man')], null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('educational_institution', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('coins', models.IntegerField(default=400)),
                ('rating_stars', models.FloatField(default=800.0)),
                ('access_groups', models.ManyToManyField(related_name='users', through='Users.AccessGroupUserRelation', to='Content.AccessGroup')),
                ('achievements', models.ManyToManyField(related_name='achievements', through='Users.UserAchievementRelation', to='Statistics.Achievement')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserInfoVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_version', models.IntegerField(verbose_name='App version')),
                ('dialog_version', models.IntegerField(verbose_name='Dialog version')),
                ('advertisement_version', models.IntegerField(default=0, verbose_name='Advertisement version')),
                ('last_dialog_time', models.DateTimeField(verbose_name='Timestamp of last sending dialog')),
                ('notification_version', models.IntegerField(verbose_name='Notification version')),
                ('motivation_version', models.IntegerField(default=0, verbose_name='Motivation version')),
                ('sale_content_version', models.IntegerField(default=0, verbose_name='Sale content dialog version')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='userachievementrelation',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='NotificationPushToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.TextField(unique=True)),
                ('type', models.CharField(max_length=10)),
                ('active', models.IntegerField(default=1)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BannedUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(verbose_name='Type of ban')),
                ('end_day', models.DateField(verbose_name='End day')),
                ('description', models.TextField(blank=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='accessgroupuserrelation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username', 'vk_id'], name='Users_user_usernam_6f6231_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('username', 'vk_id'), name='username_vk_id_unique'),
        ),
        migrations.AddIndex(
            model_name='notificationpushtoken',
            index=models.Index(fields=['user', 'token'], name='Users_notif_user_id_c8d9d3_idx'),
        ),
    ]
